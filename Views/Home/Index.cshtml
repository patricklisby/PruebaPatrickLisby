@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Home";
    // Obtener el permiso del usuario directamente desde la sesión
    var idPermiso = HttpContextAccessor.HttpContext.Session.GetInt32("SessionUserPermission") ?? 0;
    var nombreUsuario = HttpContextAccessor.HttpContext.Session.GetString("SessionUserName") ?? "NO DATA";

    Console.WriteLine($"ID Permiso: {idPermiso}  {nombreUsuario}");

    // Verificar si el usuario es administrador
    bool esAdmin = idPermiso == 1;
}

<div class="container mx-auto px-4">
    <div class="flex justify-between items-center mt-8 mb-4">
        <h1 class="text-3xl font-bold text-gray-800">Productos</h1>
        <!-- Solo renderizar los botones si el usuario es administrador -->
        @if (esAdmin)
        {
            <button id="btnCrearProducto" class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700">
                Crear Producto
            </button>
            <button id="btnGestionarCategorias" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                Gestionar Categorías
            </button>
        }
    </div>

    <!-- Contenedor de productos -->
    <div id="productosContainer" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
        <!-- Los productos se renderizan dinámicamente aquí -->
    </div>
</div>

<!-- Modal para vistas parciales -->
<div id="modalContainer" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden flex items-center justify-center">
    <div class="bg-white p-8 rounded-lg shadow-lg max-w-3xl w-full relative">
        <button id="closeModal" class="absolute top-2 right-2 text-gray-500 hover:text-gray-800">
            &times;
        </button>
        <div id="modalContent">
            <!-- Contenido dinámico de vistas parciales -->
        </div>
    </div>
</div>

<!-- Contenedor para alertas -->
<div id="alertContainer" class="fixed top-4 right-4 space-y-4 z-50"></div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const apiBaseUrl = '/api/Producto';
            const productosContainer = document.getElementById("productosContainer");
            const modalContainer = document.getElementById("modalContainer");
            const modalContent = document.getElementById("modalContent");
            const alertContainer = document.getElementById("alertContainer");

            // Función para cargar productos
            async function cargarProductos() {
                try {
                    const response = await fetch(`${apiBaseUrl}/obtenerProductos`);
                    if (!response.ok) {
                        throw new Error("Error al cargar los productos.");
                    }

                    const productos = await response.json();
                    productosContainer.innerHTML = ''; // Limpiar contenedor

                    if (productos.length === 0) {
                        productosContainer.innerHTML = '<p class="text-gray-500">No hay productos disponibles.</p>';
                        return;
                    }

                    productos.forEach(producto => {
                        const productoCard = crearProductoCard(producto);
                        productosContainer.appendChild(productoCard);
                    });
                } catch (error) {
                    console.error(error);
                }
            }

            // Función para crear las tarjetas de producto
            function crearProductoCard(producto) {
                const card = document.createElement("div");
                card.className = "bg-white rounded-lg shadow-md overflow-hidden flex flex-col justify-between";

                card.innerHTML = `
                            <div class="aspect-w-3 aspect-h-4 bg-gray-200">
                                <img src="${producto.imagenUrl || '/imagenes/default.webp'}" alt="${producto.descripcionProducto}" class="object-cover w-full h-full" onerror="this.onerror=null;this.src='/imagenes/default.webp';">
                            </div>
                            <div class="p-4 flex-grow flex flex-col justify-between">
                                <div>
                                    <h2 class="text-lg font-bold text-gray-800 truncate">${producto.descripcionProducto}</h2>
                                    <p class="text-sm text-gray-600">${producto.detallesProducto}</p>
                                    <p class="text-gray-800 font-bold mt-2">Cantidad: ${producto.cantidadProducto}</p>
                                    <p class="text-gray-800 font-bold mt-2">Precio: ₡${producto.precioProducto.toFixed(2)}</p>
                                </div>
                            </div>
                        `;
                return card;
            }

            // Cargar los productos al cargar la página
            cargarProductos();
        });
    </script>
}
