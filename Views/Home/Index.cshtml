@{
    ViewData["Title"] = "Home";
}

<div class="container mx-auto px-4">
    <div class="flex justify-between items-center mt-8 mb-4">
        <h1 class="text-3xl font-bold text-gray-800">Productos</h1>
        <button id="btnCrearProducto" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">
            Crear Producto
        </button>
    </div>

    <div id="productosContainer" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        <!-- Los productos se renderizan dinámicamente aquí -->
    </div>
</div>

<!-- Modal para vistas parciales -->
<div id="modalContainer" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden flex items-center justify-center">
    <div class="bg-white p-8 rounded-lg shadow-lg max-w-3xl w-full relative">
        <button id="closeModal" class="absolute top-2 right-2 text-gray-500 hover:text-gray-800">
            &times;
        </button>
        <div id="modalContent">
            <!-- Contenido dinámico de vistas parciales -->
        </div>
    </div>
</div>

<!-- Contenedor para alertas -->
<div id="alertContainer" class="fixed top-4 right-4 space-y-4 z-50"></div>

@section Scripts {
  <script>
        document.addEventListener("DOMContentLoaded", () => {
            const apiBaseUrl = '/api/Producto';
            const productosContainer = document.getElementById("productosContainer");
            const modalContainer = document.getElementById("modalContainer");
            const modalContent = document.getElementById("modalContent");
            const alertContainer = document.getElementById("alertContainer");

            // Función para mostrar alertas
            function mostrarAlerta(tipo, mensaje) {
                const alert = document.createElement("div");
                alert.className = `p-4 rounded-md shadow-md text-white text-sm ${tipo === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
                alert.textContent = mensaje;

                alertContainer.appendChild(alert);

                setTimeout(() => {
                    alert.remove();
                }, 3000); // Ocultar después de 3 segundos
            }

            // Cargar productos
            async function cargarProductos() {
                try {
                    const response = await fetch(`${apiBaseUrl}/obtenerProductos`);
                    if (!response.ok) {
                        throw new Error("Error al cargar los productos.");
                    }

                    const productos = await response.json();
                    productosContainer.innerHTML = ''; // Limpiar contenedor

                    if (productos.length === 0) {
                        productosContainer.innerHTML = '<p class="text-gray-500">No hay productos disponibles.</p>';
                        return;
                    }

                    productos.forEach(producto => {
                        const productoCard = crearProductoCard(producto);
                        productosContainer.appendChild(productoCard);
                    });
                } catch (error) {
                    console.error(error);
                    mostrarAlerta('error', 'Error al cargar los productos.');
                }
            }

            function crearProductoCard(producto) {
                const card = document.createElement("div");
                card.className = "bg-white rounded-lg shadow-md overflow-hidden flex flex-col justify-between";

                const imagenUrl = producto.ImagenUrl || "/imagenes/default.png";

                card.innerHTML = `
                    <!-- Imagen con una proporción más adecuada -->
                    <div class="aspect-w-3 aspect-h-4 bg-gray-200">
                        <img src="${producto.imagenUrl}" alt="${producto.descripcionProducto}" class="object-cover w-full h-full" onerror="this.onerror=null;this.src='/imagenes/default.png';">
                    </div>
                    <div class="p-4 flex-grow flex flex-col justify-between">
                        <div>
                            <h2 class="text-lg font-bold text-gray-800 truncate">${producto.descripcionProducto}</h2>
                            <p class="text-sm text-gray-600">${producto.detallesProducto}</p>
                            <p class="text-gray-800 font-bold mt-2">Precio: ₡${producto.precioProducto.toFixed(2)}</p>
                        </div>
                        <div class="mt-4">
                            <button data-id="${producto.idProducto}" class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-900 w-full">
                                Editar
                            </button>
                        </div>
                    </div>
                `;

                card.querySelector("button").addEventListener("click", () => {
                    cargarVistaEditar(producto.idProducto);
                });

                return card;
            }

            // Abrir modal
            function abrirModal(content) {
                modalContent.innerHTML = content;
                modalContainer.classList.remove("hidden");

                const closeModalButton = document.getElementById("closeModal");
                if (closeModalButton) {
                    closeModalButton.addEventListener("click", () => {
                        modalContainer.classList.add("hidden");
                    });
                }
            }

            // Cargar vista de crear producto
            async function cargarVistaCrear() {
                const form = `
                    <h2 class="text-lg font-bold mb-4">Crear Producto</h2>
                    <form id="crearProductoForm" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Descripción</label>
                            <input type="text" name="descripcionProducto" id="descripcionProducto" class="w-full border-gray-300 rounded-md shadow-sm" required>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Detalles</label>
                            <textarea name="detallesProducto" id="detallesProducto" class="w-full border-gray-300 rounded-md shadow-sm" rows="4"></textarea>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Precio</label>
                            <input type="number" step="0.01" name="precioProducto" id="precioProducto" class="w-full border-gray-300 rounded-md shadow-sm" required>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Cantidad</label>
                            <input type="number" name="cantidadProducto" id="cantidadProducto" class="w-full border-gray-300 rounded-md shadow-sm" required>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Categoría</label>
                            <select name="idCategoria" id="idCategoria" class="w-full border-gray-300 rounded-md shadow-sm" required>
                                <option value="">Seleccione una categoría</option>
                                <!-- Categorías dinámicas -->
                            </select>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Imagen</label>
                            <input type="file" name="imagen" id="imagen" class="w-full border-gray-300 rounded-md shadow-sm">
                        </div>
                        <div class="flex justify-end">
                            <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">Guardar</button>
                        </div>
                    </form>
                `;

                abrirModal(form);

                async function cargarCategorias() {
                    try {
                        const response = await fetch("/api/Categoria/obtenerCategorias");
                        if (!response.ok) throw new Error("Error al cargar categorías.");

                        const categorias = await response.json();
                        const categoriaSelect = document.getElementById("idCategoria");

                        categorias.forEach((categoria) => {
                            const option = document.createElement("option");
                            option.value = categoria.idCategoria;
                            option.textContent = categoria.descripcionCategoria;
                            categoriaSelect.appendChild(option);
                        });
                    } catch (error) {
                        console.error("Error al cargar categorías:", error);
                    }
                }
                cargarCategorias();

                const formElement = document.getElementById("crearProductoForm");
                formElement.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const formData = new FormData(formElement);

                    try {
                        const response = await fetch("/api/Producto/crearProducto", {
                            method: "POST",
                            body: formData,
                        });

                        if (response.ok) {
                            mostrarAlerta('success', 'Producto creado exitosamente.');
                            modalContainer.classList.add("hidden");
                            cargarProductos();
                        } else {
                            const error = await response.json();
                            mostrarAlerta('error', `Error al crear el producto: ${error.mensaje}`);
                        }
                    } catch (error) {
                        console.error("Error al enviar el formulario:", error);
                        mostrarAlerta('error', 'Error al procesar la solicitud.');
                    }
                });
            }

            // Cargar vista de editar producto
            // Función para cargar la vista de editar producto
            async function cargarVistaEditar(idProducto) {
                try {
                    const response = await fetch(`${apiBaseUrl}/obtenerProductoId/${idProducto}`);
                    if (!response.ok) {
                        throw new Error("Error al obtener el producto.");
                    }

                    const producto = await response.json();

                    const imagenUrl = producto.ImagenUrl || '/imagenes/default.png';

                    const form = `
                    <h2 class="text-lg font-bold mb-4">Editar Producto</h2>
                    <form id="editarProductoForm" enctype="multipart/form-data">
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Descripción</label>
                            <input type="text" name="descripcionProducto" id="descripcionProducto" class="w-full border-gray-300 rounded-md shadow-sm" value="${producto.descripcionProducto}" required>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Detalles</label>
                            <textarea name="detallesProducto" id="detallesProducto" class="w-full border-gray-300 rounded-md shadow-sm" rows="4">${producto.detallesProducto}</textarea>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Precio</label>
                            <input type="number" name="precioProducto" id="precioProducto" class="w-full border-gray-300 rounded-md shadow-sm" value="${producto.precioProducto}" required>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Cantidad</label>
                            <input type="number" name="cantidadProducto" id="cantidadProducto" class="w-full border-gray-300 rounded-md shadow-sm" value="${producto.cantidadProducto}" required>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Categoría</label>
                            <select name="idCategoria" id="idCategoria" class="w-full border-gray-300 rounded-md shadow-sm" required>
                                <option value="">Seleccione una categoría</option>
                            </select>
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Imagen Actual</label>
                            <img src="${imagenUrl}" alt="Imagen del producto" class="w-32 h-32 object-cover rounded-md border border-gray-300">
                        </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Nueva Imagen</label>
                            <input type="file" name="imagen" id="imagen" class="w-full border-gray-300 rounded-md shadow-sm">
                        </div>
                        <div class="flex justify-end">
                            <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700">Guardar</button>
                        </div>
                    </form>
                `;

                    abrirModal(form);

                    // Cargar categorías dinámicamente
                    async function cargarCategorias() {
                        try {
                            const response = await fetch("/api/Categoria/obtenerCategorias");
                            if (!response.ok) throw new Error("Error al cargar categorías.");

                            const categorias = await response.json();
                            const categoriaSelect = document.getElementById("idCategoria");

                            categorias.forEach((categoria) => {
                                const option = document.createElement("option");
                                option.value = categoria.idCategoria;
                                option.textContent = categoria.descripcionCategoria;
                                option.selected = categoria.idCategoria === producto.idCategoria;
                                categoriaSelect.appendChild(option);
                            });
                        } catch (error) {
                            console.error("Error al cargar categorías:", error);
                        }
                    }
                    cargarCategorias();

                    const formElement = document.getElementById("editarProductoForm");
                    formElement.addEventListener("submit", async (e) => {
                        e.preventDefault();

                        const formData = new FormData(formElement);

                        try {
                            const response = await fetch(`${apiBaseUrl}/editarProducto/${idProducto}`, {
                                method: "PUT",
                                body: formData,
                            });

                            if (response.ok) {
                                mostrarAlerta('success', 'Producto editado exitosamente.');
                                modalContainer.classList.add("hidden");
                                cargarProductos();
                            } else {
                                const error = await response.json();
                                mostrarAlerta('error', `Error al editar el producto: ${error.mensaje}`);
                            }
                        } catch (error) {
                            console.error("Error al enviar el formulario:", error);
                            mostrarAlerta('error', 'Error al procesar la solicitud.');
                        }
                    });
                } catch (error) {
                    console.error(error);
                    mostrarAlerta('error', 'Error al cargar los datos del producto.');
                }
            }

            // Inicializar eventos
            document.getElementById("btnCrearProducto").addEventListener("click", cargarVistaCrear);
            cargarProductos();
        });

  </script>
}
